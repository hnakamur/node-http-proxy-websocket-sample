{
  "name": "daemon",
  "version": "0.5.1",
  "description": "Add-on for creating *nix daemons",
  "author": {
    "name": "Arthur",
    "email": "arthur@norgic.com",
    "url": "Slashed"
  },
  "contributors": [
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com"
    },
    {
      "name": "Charlie Robbins",
      "email": "charlie.robbins@gmail.com"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net"
    },
    {
      "name": "Zak Taylor",
      "email": "zak@dobl.com"
    },
    {
      "name": "Daniel Bartlett",
      "email": "dan@f-box.org"
    },
    {
      "name": "Charlie McConnell",
      "email": "charlie@charlieistheman.com"
    },
    {
      "name": "Josh Holbrook",
      "email": "josh@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/indexzero/daemon.node.git"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "main": "./lib/daemon",
  "scripts": {
    "preinstall": "bash ./install"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# daemon.node\n\nA C++ add-on for Node.js to enable simple daemons in Javascript plus some useful wrappers in Javascript.\n\n## Installation\n\n### Installing daemon.node with npm\n```\n  [sudo] npm install daemon\n```\n\n### Installing daemon.node locally \n```\n  node-waf configure build  \n```\n\n## Usage\n\n### Caveats Regarding Forking Safety\n\nAs of v0.6, node.js has not been fork-safe. What this means for you is that **all daemonization should happen on the first tick and not as part of an asynchronous action**. The easiest way to ensure this is to daemonize your process very early in the script, near the \"require\" block.\n\n`daemon.kill`, however, is still asynchronous.\n\n### Starting a daemon:\nStarting a daemon is easy, just call daemon.start() and daemon.lock().\n\n``` js\nvar daemon = require('daemon'),\n    pid;\n\npid = daemon.start('stdout.log', 'stderr.log');\ndaemon.lock('/tmp/yourprogram.pid');\n```\n\n`daemon.start` daemonizes your script's process and redirects stdio to the specified files. `daemon.lock` places a lockfile on your daemon.\n\nThis library also exposes a higher level facility through javascript for starting daemons:\n\n``` js\n  var daemon = require('daemon'),\n      pid;\n  \n  pid = daemon.daemonize({ stdout: 'somefile.log', stderr: 'error.log' }, '/tmp/yourprogram.pid');\n  console.log('Daemon started successfully with pid: ' + pid);\n```\n\nIf you wish you can also simply pass a single pass which you wish to be used for both `stdout` and `stderr`:\n\n``` js\n  var daemon = require('daemon'),\n      pid;\n  \n  pid = daemon.daemonize('stdout-and-stderr.log', '/tmp/yourprogram.pid');\n  console.log('Daemon started successfully with pid: ' + pid);\n```\n\n### Methods\n\n#### daemon.start(stdout[, stderr])\n  Takes two filenames, one for `stdout` and one for `stderr`. If only `stdout` is supplied, `stderr` will use the same filename. If no arguments are passed, `stdout` and `stderr` output will be sent to `/dev/null`. Returns the process pid.\n#### daemon.lock('/tmp/lockfile.pid')\n  Try to lock the file. If it's unable to OPEN the file it will exit. If it's unable to get a LOCK on the file it will return false. Else it will return true.\n#### daemon.daemonize({ stdout: 'stdout.log', stderr: 'stderr.log' }, '/tmp/lockfile.pid', [cb])\n  A convenience wrapper around `daemon.start` and `daemon.lock`. Returns pid, optionally calls `cb(err, pid)` for error handling and backwards compatibility. *This method is still synchronous*.\n#### daemon.kill(lockfile, cb)\n  Kills the process specified in the lockfile and cleans the file. Unlike every other method in this library, this one is asynchronous.\n#### daemon.closeStdin()\n  Closes stdin and reopens fd as /dev/null.\n#### daemon.closeStdout()\n  Closes stdout and reopens fd as /dev/null.\n#### daemon.closeStderr()\n  Closes stderr and reopens fd as /dev/null.\n#### daemon.closeStdio()\n  Closes std[in|out|err] and reopens fd as /dev/null.\n#### daemon.chroot('/path_to_chroot_to')\n  Attempts to chroot the process, returns exception on error, returns true on success.\n#### daemon.setreuid(1000)\n  Change the effective user of the process. Can take either an integer (UID) or a string (Username). Returns exceptions on error and true on success.\n\n### The Fine Print\n\nThis library is available under the MIT LICENSE. See the LICENSE file for more details. It was originally created by [Slashed][2] and has been forked/improved/hacked upon by a lot of good people. Special thanks to [Isaacs][5] for npm and a great example in [glob][6].\n\n#### Author: [Slashed](http://github.com/slashed)\n#### Contributors: [Charlie Robbins](http://nodejitsu.com), [Pedro Teixeira](https://github.com/pgte), [James Halliday](https://github.com/substack), [Zak Taylor](https://github.com/dobl), [Daniel Bartlett](https://github.com/danbuk), [Charlie McConnell](https://github.com/AvianFlu)\n\n[0]: http://slashed.posterous.com/writing-daemons-in-javascript-with-nodejs-0\n[1]: https://github.com/pgte/fugue/blob/master/deps/daemon.cc\n[2]: https://github.com/slashed/daemon.node\n[3]: https://github.com/substack/daemon.node/\n[4]: https://github.com/dobl/daemon.node\n[5]: https://github.com/isaacs/npm\n[6]: https://github.com/isaacs/node-glob\n",
  "_id": "daemon@0.5.1",
  "_from": "daemon@0.5.x"
}
